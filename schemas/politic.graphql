extend schema
	@authentication(
		operations: [
			CREATE
			UPDATE
			DELETE
			CREATE_RELATIONSHIP
			DELETE_RELATIONSHIP
		]
	)

type Person @node {
	id: ID!
	prefix: String!
	firstname: String!
	lastname: String!
	email: String
	gender: Gender
	birth_date: Date
	educations: String
	previous_occupations: String
	image: String
	national_identity: String
	memberships: [Membership!]!
		@relationship(type: "HELD", properties: "Relation", direction: OUT)

	links: [Link!]!
		@relationship(type: "HAVE", properties: "Relation", direction: OUT)

	votes: [Vote!]!
		@relationship(type: "VOTED_BY", properties: "Relation", direction: IN)
	proposed_motions: [Motion!]!
		@relationship(type: "PROPOSED_BY", properties: "Relation", direction: IN)

	created_at: DateTime! @timestamp(operations: [CREATE])
	updated_at: DateTime @timestamp(operations: [UPDATE])
}

type Organization @node {
	id: ID!
	name: String!
	description: String
	classification: OrganizationType!
	founding_date: Date
	dissolution_date: Date
	image: String
	color: String
	parents: [Organization!]!
		@relationship(type: "UNDER", properties: "Relation", direction: OUT)
	children: [Organization!]!
		@relationship(type: "UNDER", properties: "Relation", direction: IN)
	posts: [Post!]!
		@relationship(type: "IN", properties: "Relation", direction: IN)
	memberships: [Membership!]!
		@relationship(type: "HELD", properties: "Relation", direction: OUT)

	motions: [Motion!]!
		@relationship(type: "PROPOSED_IN", properties: "Relation", direction: IN)
	events: [Event!]!
		@relationship(type: "HELD_EVENT", properties: "Relation", direction: OUT)

	links: [Link!]!
		@relationship(type: "HAVE", properties: "Relation", direction: OUT)
	created_at: DateTime! @timestamp(operations: [CREATE])
	updated_at: DateTime @timestamp(operations: [UPDATE])
}

union LinkOwner = Person | Organization | Bill # Link for Person, Organization or Bill
type Link @node {
	url: String!
	note: String
	owners: [LinkOwner!]!
		@relationship(type: "HAVE", properties: "Relation", direction: IN)
}

type Post @node {
	id: ID! @id
	label: String
	role: String!
	start_date: Date
	end_date: Date
	organizations: [Organization!]!
		@relationship(type: "IN", properties: "Relation", direction: OUT)
	memberships: [Membership!]!
		@relationship(type: "AS", properties: "Relation", direction: IN)
	created_at: DateTime! @timestamp(operations: [CREATE])
	updated_at: DateTime @timestamp(operations: [UPDATE])
}

union Member = Person | Organization
type Membership @node {
	id: ID! @id
	members: [Member!]!
		@relationship(type: "HELD", properties: "Relation", direction: IN)
	posts: [Post!]!
		@relationship(type: "AS", properties: "Relation", direction: OUT)
	appointment_method: String
	province: String
	district_number: Int
	partylist_number: Int
	list_number: Int
	start_date: Date
	end_date: Date
	links: [Link!]!
		@relationship(type: "HAVE", properties: "Relation", direction: OUT)
}

union MotionProposer = Person | Organization
interface Motion {
	organizations: [Organization!]! @declareRelationship
	creators: [MotionProposer!]! @declareRelationship
	title: String
	proposal_date: Date
	text: String
	requirement: String
	result: String
}

type Bill implements Motion @node {
	id: ID! @id
	organizations: [Organization!]!
		@relationship(type: "PROPOSED_IN", properties: "Relation", direction: OUT)
	creators: [MotionProposer!]!
		@relationship(type: "PROPOSED_BY", properties: "Relation", direction: OUT)
	people_signature_count: Int
	title: String
	proposal_date: Date
	text: String
	requirement: String
	result: String
	bill_events: [Event!]!
		@relationship(type: "IN", properties: "Relation", direction: IN)
	classification: BillType!
	nickname: String
	acceptance_number: String
	issue_number: String
	issue_year: String
	categories: [String!]
	co_proposers: [Person!]!
		@relationship(
			type: "CO_PROPOSED_BY"
			properties: "Relation"
			direction: OUT
		)
	links: [Link!]!
		@relationship(type: "HAVE", properties: "Relation", direction: OUT)
}

interface Event {
	organizations: [Organization!]! @declareRelationship
	motions: [Motion!]! @declareRelationship
	description: String
	start_date: Date
	end_date: Date
}

type BillEvent implements Event @node {
	id: ID! @id
	organizations: [Organization!]!
		@relationship(type: "HELD_EVENT", properties: "Relation", direction: IN)
	motions: [Motion!]!
		@relationship(type: "IN", properties: "Relation", direction: OUT)
	classification: BillEventType!
	description: String
	start_date: Date
	end_date: Date
	result: String
}

type VoteEvent implements Event @node {
	id: ID! @id
	votes: [Vote!]!
		@relationship(type: "VOTED_IN", properties: "Relation", direction: IN)
	organizations: [Organization!]!
		@relationship(type: "HELD_EVENT", properties: "Relation", direction: IN)
	motions: [Motion!]!
		@relationship(type: "IN", properties: "Relation", direction: OUT)
	classification: VoteEventType!
	description: String
	start_date: Date
	end_date: Date
	result: String
	count: Int
	msbis_id: Int
}

type Vote @node {
	id: ID! @id
	vote_events: [VoteEvent!]!
		@relationship(type: "VOTED_IN", properties: "Relation", direction: OUT)
	voters: [Person!]!
		@relationship(type: "VOTED_BY", properties: "Relation", direction: OUT)
	option: String!
}

type Relation @relationshipProperties {
	id: ID! @id
	created_at: DateTime! @timestamp(operations: [CREATE])
	updated_at: DateTime @timestamp(operations: [UPDATE])
}

type RelationWithPeriod @relationshipProperties {
	id: ID! @id
	start_date: Date
	end_date: Date
	created_at: DateTime! @timestamp(operations: [CREATE])
	updated_at: DateTime @timestamp(operations: [UPDATE])
}

enum Gender {
	MALE
	FEMALE
}

enum OrganizationType {
	PARLIAMENT
	HOUSE_OF_REPRESENTATIVE
	HOUSE_OF_SENATE
	CABINET
	POLITICAL_PARTY
	PRIVATE_ORGANIZATION
}

enum BillType { # placeholder # TODO add & change enum
	NORMAL_BILL
	BUDGET_BILL
	EMERGENCY_DECREE
}

enum BillEventType {
	HEARING
	ENFORCED
	ROYAL_ASSENT
	OTHER
}

enum VoteEventType {
	MP_1
	MP_2
	MP_3
	SENATE_1
	SENATE_2
	SENATE_3
}
